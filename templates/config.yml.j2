version: 0.1
log:
  level: "{{ log_level }}"
http:
  addr: localhost:5000
storage:
{% if storage_type == 'local' %}
  filesystem:
    rootdirectory: "{{ storage_path }}"
    maxthreads: 100
{% endif %}
{% if storage_type == 's3' %}
  s3: 
    region: "{{ s3_region }}"
    bucket: "{{ s3_bucket }}"
{% if s3_access_key is defined and s3_secret_key is defined %}
    accesskey: "{{ s3_access_key }}"
    secretkey: "{{ s3_secret_key }}"
{% else %}
    # No [s3_access_key|s3_secret_key] lets us use an IAM instance profile
    # that is attached to the virtual machine. See:
    # http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-usingrole-ec2instance.html
{% endif %}
{% endif %}
{% if storage_type == 'gcs' %}
  gcs:
    bucket: "{{ gcs_bucket }}"
{% if use_gcs_default_credentials is defined %}
   # No oauth2 or [gcs_access_key|gcs_secret_key] let us use a service account
   # that is connected to the virtual machine instance see Google Application
   # Default Credentials (see
   # https://developers.google.com/identity/protocols/application-default-credentials)
   # to allow the docker registry to get its authorisation credentials by making
   # google api calls.
{% else %}
    gcs_keyfile: "{{ gcs_keyfile }}"
{% endif %}

{% if use_redis %}
redis:
  addr: localhost:6379
{% endif %}